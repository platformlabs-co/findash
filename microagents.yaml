version: v1
description: FinDash - Open Source FinOps Dashboard microagent rules

# Define the agents that will manage different aspects of the codebase
agents:
  - name: api-agent
    description: Manages the FastAPI backend code
    paths:
      - api/**/*.py
    expertise:
      - Python
      - FastAPI
      - SQLAlchemy
      - Database migrations
      - API development
    responsibilities:
      - Maintain API endpoints and services
      - Handle database migrations
      - Implement cloud vendor integrations
      - Manage authentication and authorization
      - Implement cost analysis and forecasting algorithms

  - name: frontend-agent
    description: Manages the React frontend code
    paths:
      - dashboard/src/**/*.tsx
      - dashboard/src/**/*.ts
    expertise:
      - TypeScript
      - React
      - TailwindCSS
      - Auth0 integration
      - Data visualization
    responsibilities:
      - Maintain React components and views
      - Implement UI/UX features
      - Handle frontend state management
      - Integrate with backend APIs
      - Implement data visualization components

  - name: devops-agent
    description: Manages infrastructure and deployment code
    paths:
      - helm/**/*
      - docker-compose.yml
      - **/Dockerfile
      - .github/**/*
    expertise:
      - Kubernetes
      - Helm
      - Docker
      - CI/CD
      - Infrastructure as Code
    responsibilities:
      - Maintain Helm charts
      - Configure Kubernetes deployments
      - Manage Docker configurations
      - Set up CI/CD pipelines
      - Handle infrastructure scaling

  - name: security-agent
    description: Manages security aspects and configurations
    paths:
      - api/app/helpers/auth.py
      - api/app/helpers/secrets*.py
      - dashboard/src/**/auth/**/*
    expertise:
      - Security best practices
      - Auth0
      - API security
      - Secret management
      - Access control
    responsibilities:
      - Review security configurations
      - Implement authentication flows
      - Manage secrets and credentials
      - Ensure secure API endpoints
      - Handle user authorization

  - name: test-agent
    description: Manages test suites and quality assurance
    paths:
      - api/app/tests/**/*
      - dashboard/src/**/*.test.tsx
      - dashboard/src/**/*.test.ts
    expertise:
      - Python testing (pytest)
      - React Testing Library
      - Jest
      - E2E testing
      - Test automation
    responsibilities:
      - Maintain test suites
      - Ensure test coverage
      - Implement integration tests
      - Set up E2E testing
      - Monitor test quality

# Define rules for code review and collaboration
rules:
  - description: API changes require api-agent review
    when:
      paths_changed:
        - api/**/*.py
    require_review_from:
      - api-agent

  - description: Frontend changes require frontend-agent review
    when:
      paths_changed:
        - dashboard/src/**/*.tsx
        - dashboard/src/**/*.ts
    require_review_from:
      - frontend-agent

  - description: Infrastructure changes require devops-agent review
    when:
      paths_changed:
        - helm/**/*
        - docker-compose.yml
        - **/Dockerfile
        - .github/**/*
    require_review_from:
      - devops-agent

  - description: Security-related changes require security-agent review
    when:
      paths_changed:
        - api/app/helpers/auth.py
        - api/app/helpers/secrets*.py
        - dashboard/src/**/auth/**/*
    require_review_from:
      - security-agent

  - description: Test changes require test-agent review
    when:
      paths_changed:
        - api/app/tests/**/*
        - dashboard/src/**/*.test.tsx
        - dashboard/src/**/*.test.ts
    require_review_from:
      - test-agent

  - description: Major architectural changes require multiple reviews
    when:
      significant_changes: true
    require_review_from:
      - api-agent
      - frontend-agent
      - devops-agent

# Define automation rules
automations:
  - name: dependency-updates
    description: Automated dependency updates
    trigger:
      - schedule: weekly
      - on_security_alert: true
    actions:
      - update_dependencies:
          paths:
            - api/uv.lock
            - dashboard/package.json
      - create_pull_request:
          title: "chore: update dependencies"
          reviewers:
            - api-agent
            - frontend-agent

  - name: test-automation
    description: Run tests on pull requests
    trigger:
      - pull_request
    actions:
      - run_tests:
          backend: "pytest api/app/tests"
          frontend: "npm test"
      - report_coverage

  - name: lint-format
    description: Automated code formatting and linting
    trigger:
      - pre_commit
      - pull_request
    actions:
      - format_code:
          backend: "black api/"
          frontend: "prettier --write dashboard/src/"
      - lint_code:
          backend: "flake8 api/"
          frontend: "eslint dashboard/src/"